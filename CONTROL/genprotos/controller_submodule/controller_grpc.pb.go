// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: controller_submodule/controller.proto

package controlrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ControllerService_TurnDeviceOn_FullMethodName        = "/controller.ControllerService/TurnDeviceOn"
	ControllerService_TurnDeviceOff_FullMethodName       = "/controller.ControllerService/TurnDeviceOff"
	ControllerService_AddUserToHouse_FullMethodName      = "/controller.ControllerService/AddUserToHouse"
	ControllerService_RemoveUserFromHouse_FullMethodName = "/controller.ControllerService/RemoveUserFromHouse"
	ControllerService_GetBatteryStatus_FullMethodName    = "/controller.ControllerService/GetBatteryStatus"
)

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerServiceClient interface {
	TurnDeviceOn(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	TurnDeviceOff(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	AddUserToHouse(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*HouseResponse, error)
	RemoveUserFromHouse(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*HouseResponse, error)
	GetBatteryStatus(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*BatteryResponse, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) TurnDeviceOn(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, ControllerService_TurnDeviceOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) TurnDeviceOff(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, ControllerService_TurnDeviceOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AddUserToHouse(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*HouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseResponse)
	err := c.cc.Invoke(ctx, ControllerService_AddUserToHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) RemoveUserFromHouse(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*HouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseResponse)
	err := c.cc.Invoke(ctx, ControllerService_RemoveUserFromHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetBatteryStatus(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*BatteryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatteryResponse)
	err := c.cc.Invoke(ctx, ControllerService_GetBatteryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
// All implementations must embed UnimplementedControllerServiceServer
// for forward compatibility
type ControllerServiceServer interface {
	TurnDeviceOn(context.Context, *DeviceRequest) (*DeviceResponse, error)
	TurnDeviceOff(context.Context, *DeviceRequest) (*DeviceResponse, error)
	AddUserToHouse(context.Context, *UserRequest) (*HouseResponse, error)
	RemoveUserFromHouse(context.Context, *UserRequest) (*HouseResponse, error)
	GetBatteryStatus(context.Context, *DeviceRequest) (*BatteryResponse, error)
	mustEmbedUnimplementedControllerServiceServer()
}

// UnimplementedControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (UnimplementedControllerServiceServer) TurnDeviceOn(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnDeviceOn not implemented")
}
func (UnimplementedControllerServiceServer) TurnDeviceOff(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnDeviceOff not implemented")
}
func (UnimplementedControllerServiceServer) AddUserToHouse(context.Context, *UserRequest) (*HouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToHouse not implemented")
}
func (UnimplementedControllerServiceServer) RemoveUserFromHouse(context.Context, *UserRequest) (*HouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromHouse not implemented")
}
func (UnimplementedControllerServiceServer) GetBatteryStatus(context.Context, *DeviceRequest) (*BatteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatteryStatus not implemented")
}
func (UnimplementedControllerServiceServer) mustEmbedUnimplementedControllerServiceServer() {}

// UnsafeControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServiceServer will
// result in compilation errors.
type UnsafeControllerServiceServer interface {
	mustEmbedUnimplementedControllerServiceServer()
}

func RegisterControllerServiceServer(s grpc.ServiceRegistrar, srv ControllerServiceServer) {
	s.RegisterService(&ControllerService_ServiceDesc, srv)
}

func _ControllerService_TurnDeviceOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).TurnDeviceOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_TurnDeviceOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).TurnDeviceOn(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_TurnDeviceOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).TurnDeviceOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_TurnDeviceOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).TurnDeviceOff(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AddUserToHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AddUserToHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_AddUserToHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AddUserToHouse(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_RemoveUserFromHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).RemoveUserFromHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_RemoveUserFromHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).RemoveUserFromHouse(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetBatteryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetBatteryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_GetBatteryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetBatteryStatus(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerService_ServiceDesc is the grpc.ServiceDesc for ControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TurnDeviceOn",
			Handler:    _ControllerService_TurnDeviceOn_Handler,
		},
		{
			MethodName: "TurnDeviceOff",
			Handler:    _ControllerService_TurnDeviceOff_Handler,
		},
		{
			MethodName: "AddUserToHouse",
			Handler:    _ControllerService_AddUserToHouse_Handler,
		},
		{
			MethodName: "RemoveUserFromHouse",
			Handler:    _ControllerService_RemoveUserFromHouse_Handler,
		},
		{
			MethodName: "GetBatteryStatus",
			Handler:    _ControllerService_GetBatteryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller_submodule/controller.proto",
}
